/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@com.qualcomm.robotcore.eventloop.opmode.TeleOp(name="TeleOp Arcade", group="Linear Opmode")

public class TeleOpArcade extends LinearOpMode
{
    private HardRobot robot = new HardRobot();
    private ElapsedTime runtime = new ElapsedTime();

    @Override
    public void runOpMode()
    {
        telemetry.addData("Initialization", "Starting...");
        telemetry.update();

        robot.init(hardwareMap);

        sleep(500);     // pause for servos to move

        telemetry.addData("Initialization", "Initialization Complete!");
        telemetry.update();

        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        runtime.reset();
        // run until the end of the match (driver presses STOP)
        while (opModeIsActive())
        {
            double liftPower;
            double xValue, yValue;
            double RFLRPower, LFRRPower, pivotPower;

            liftPower  = -gamepad2.left_stick_y ;
            
            pivotPower = gamepad1.right_trigger -gamepad1.left_trigger;            
            
            xValue = -gamepad1.right_stick_x;
            yValue = -gamepad1.right_stick_y;

            RFLRPower = yValue - xValue;
            LFRRPower = xValue + yValue;

            //combine the power settings from the joystick and the settings from the trigger
            //may get better results if if the triggers are not used at the same time as the joystick, but try it.
            robot.leftFront.setPower(Range.clip(LFRRPower + pivotPower,-1.0,1.0));
            robot.rightBack.setPower(Range.clip(LFRRPower + pivotPower,-1.0,1.0));
            robot.rightFront.setPower(Range.clip(RFLRPower - pivotPower,-1.0,1.0));
            robot.leftBack.setPower(Range.clip(RFLRPower - pivotPower,-1.0,1.0));

            robot.liftMotor.setPower(liftPower);

            if (gamepad2.left_bumper)
            {
                robot.leftClaw.setPosition(0.0);
            }
            else
            {
                robot.leftClaw.setPosition(0.25);
            }

            if (gamepad2.right_bumper)
            {
                robot.rightClaw.setPosition(1.0);
            }
            else
            {
                robot.rightClaw.setPosition(0.75);
            }

            if (gamepad2.a)
            {
                robot.bigAss.setPosition(0.75);
            }
            else
            {
                robot.bigAss.setPosition(0.0);
            }

            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.update();
        }
    }
}
